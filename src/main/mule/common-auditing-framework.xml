<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:common-logging-extension="http://www.mulesoft.org/schema/mule/common-logging-extension" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/common-logging-extension http://www.mulesoft.org/schema/mule/common-logging-extension/current/mule-common-logging-extension.xsd">
	
	<sub-flow name="audit-receiver-entry-sub-flow" doc:id="ea582c77-8794-497a-858c-539329379c20" >
		<choice doc:name="Choice" doc:id="7efc7152-ebee-4229-a31c-c9aa6b05a486" >
			<when expression="#[p('is.audit.toggle') == 'ON']">
				<async doc:name="Async" doc:id="a542103c-7f73-4ec8-bd76-5bc39d3939c2">
					<db:insert doc:name="Insert For Entry" doc:id="1c3e1322-9a36-46f9-a706-a973d57a6022" config-ref="Database_Config">
						<db:sql >INSERT INTO [dbo].[t_audit] ([request_id] ,[message_id] ,[correlation_id] ,[log_type] ,[instance_thread] ,[log_message] ,[record_create_time] ,[message_receive_time] ,[flow_status],[primary_business_key],[secondary_business_key])
VALUES (:requestId , :finalMessageId, :corrlationId ,'CALL ENTRY', :thread , :logMessage ,GETDATE() , :transactionStartTime ,1, :primaryKey, :secondaryKey);</db:sql>
						<db:input-parameters ><![CDATA[#[{
	requestId:vars.requestId,
	finalMessageId:vars.finalMessageId,
	logMessage: if(p('is.audit.payload') == 'ON' and payload != null and payload != '' and payload.^['mimeType'] != '*/*') write(payload, payload.^['mimeType']) else '',
	thread: if (vars.flowName != null) vars.flowName else p('flow.name.undefined'),
	primaryKey: vars.primaryKey,
	secondaryKey: vars.secondaryKey,
	transactionStartTime: if (vars.transactionStartTime != null) vars.transactionStartTime as DateTime { class : "java.sql.Timestamp"} else now() as DateTime { class : "java.sql.Timestamp"},
	corrlationId: vars.messageCorrelationId
}]]]></db:input-parameters>
			
</db:insert>
		</async>
			
</when>
			<otherwise >
				<set-variable value="Entry Audit Logging is turned OFF" doc:name="Set Logging Payload" doc:id="453418b9-946b-42e0-a427-17bc81a0da4c" variableName="loggingPayload"/>
				<flow-ref doc:name="Logging Message" doc:id="c8825fee-477e-444e-881d-c1e78960dfed" name="logging-sub-flow"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="audit-dispatcher-exit-sub-flow" doc:id="4537c538-861f-42ff-a02e-f4d4d60369ba" >
		<choice doc:name="Choice" doc:id="9303816f-1613-4d73-8150-1ed0c9a716ff" >
			<when expression="#[p('is.audit.toggle') == 'ON']">
				<async doc:name="Async" doc:id="1ceff0e5-2c25-4ad5-8a53-12da036c50ac">
			<db:insert doc:name="Insert For Exit" doc:id="d98643bf-7281-4bf0-915d-0377f90a683a" config-ref="Database_Config">
						<db:sql >INSERT INTO [dbo].[t_audit] ([request_id] ,[message_id] ,[correlation_id] ,[log_type] ,[instance_thread] ,[log_message] ,[record_create_time] ,[message_receive_time] ,[flow_status],[primary_business_key],[secondary_business_key])
VALUES (:requestId , :finalMessageId, :corrlationId ,'CALL EXIT' , :thread , :logMessage ,GETDATE() , :transactionStartTime ,4, :primaryKey, :secondaryKey);</db:sql>
						<db:input-parameters ><![CDATA[#[{
	requestId:vars.requestId,
	finalMessageId:vars.finalMessageId,
	logMessage: if(p('is.audit.payload') == 'ON' and payload != null and payload != '' and payload.^['mimeType'] != '*/*') write(payload, payload.^['mimeType']) else '',
	thread: if (vars.flowName != null) vars.flowName else p('flow.name.undefined'),
	primaryKey: vars.primaryKey,
	secondaryKey: vars.secondaryKey,
	transactionStartTime: if (vars.transactionStartTime != null) vars.transactionStartTime as DateTime { class : "java.sql.Timestamp"} else now() as DateTime { class : "java.sql.Timestamp"},
	corrlationId: vars.messageCorrelationId
}]]]></db:input-parameters>
					
</db:insert>
		</async>
			</when>
			<otherwise >
				<set-variable value="Exit Audit Logging is turned OFF" doc:name="Set Logging Payload" doc:id="7688c807-bb21-4fbf-92ea-4b920291ded6" variableName="loggingPayload"/>
				<flow-ref doc:name="Logging Message" doc:id="b9fcdb05-7430-4925-bf79-b63c9847e6a3" name="logging-sub-flow"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="audit-process-entry-sub-flow" doc:id="fdd7233f-db79-4783-b3ef-50735270d319" >
		<choice doc:name="Choice" doc:id="69161d4d-859d-4d9a-90f9-a2219a15980f" >
			<when expression="#[p('is.audit.toggle') == 'ON']">
				<async doc:name="Async" doc:id="b28b9029-7d26-48d6-97d0-1b652398fab8">
			<db:insert doc:name="Insert For Process Entry" doc:id="9c70c9b9-e173-4748-9087-29d4309acaad" config-ref="Database_Config">
						<db:sql >INSERT INTO [dbo].[t_audit] ([request_id] ,[message_id] ,[correlation_id] ,[log_type] ,[instance_thread] ,[log_message] ,[record_create_time] ,[message_receive_time] ,[flow_status],[primary_business_key],[secondary_business_key])
VALUES (:requestId , :finalMessageId, :corrlationId ,'PROCESS ENTRY' , :thread , :logMessage ,GETDATE() , :transactionStartTime ,2, :primaryKey, :secondaryKey);</db:sql>
						<db:input-parameters ><![CDATA[#[{
	requestId:vars.requestId,
	finalMessageId:vars.finalMessageId,
	logMessage: if( p('is.audit.payload') == 'ON' and payload != null and payload != '' and payload.^['mimeType'] != '*/*') write(payload, payload.^['mimeType']) else '',
	thread: if (vars.flowName != null) vars.flowName else p('flow.name.undefined'),
	primaryKey: vars.primaryKey,
	secondaryKey: vars.secondaryKey,
	transactionStartTime: if (vars.transactionStartTime != null) vars.transactionStartTime as DateTime { class : "java.sql.Timestamp"} else now() as DateTime { class : "java.sql.Timestamp"},
	corrlationId: vars.messageCorrelationId
}]]]></db:input-parameters>
					
</db:insert>
		</async>
			</when>
			<otherwise >
				<set-variable value="Process Entry Audit Logging is turned OFF" doc:name="Set Logging Payload" doc:id="c60c469f-9a2d-4045-bb6a-fe797d19e750" variableName="loggingPayload"/>
				<flow-ref doc:name="Logging Message" doc:id="bd8a27b2-d581-4ee6-a1f1-b1107558c4dc" name="logging-sub-flow"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="audit-process-exit-sub-flow" doc:id="2f62858f-1418-49cb-ad7d-288e54b0daee" >
		<choice doc:name="Choice" doc:id="7cb84d94-2048-4403-bc3d-f62f3ce3c935" >
			<when expression="#[p('is.audit.toggle') == 'ON']">
				<async doc:name="Async" doc:id="a3e38c48-4a16-4cc0-b250-e7ea1288b7fd">
			<db:insert doc:name="Insert For Process Exit" doc:id="bafbec8f-e4d4-4da3-8c92-6ecce0fc96ee" config-ref="Database_Config">
						<db:sql >INSERT INTO [dbo].[t_audit] ([request_id] ,[message_id] ,[correlation_id] ,[log_type] ,[instance_thread] ,[log_message] ,[record_create_time] ,[message_receive_time] ,[flow_status],[primary_business_key],[secondary_business_key])
VALUES (:requestId , :finalMessageId, :corrlationId ,'PROCESS EXIT' , :thread , :logMessage ,GETDATE() , :transactionStartTime ,5, :primaryKey, :secondaryKey);</db:sql>
						<db:input-parameters ><![CDATA[#[{
	requestId:vars.requestId,
	finalMessageId:vars.finalMessageId,
	logMessage: if(p('is.audit.payload') == 'ON' and payload != null and payload != '' and payload.^['mimeType'] != '*/*') write(payload, payload.^['mimeType']) else '',
	thread: if (vars.flowName != null) vars.flowName else p('flow.name.undefined'),
	primaryKey: vars.primaryKey,
	secondaryKey: vars.secondaryKey,
	transactionStartTime: if (vars.transactionStartTime != null) vars.transactionStartTime as DateTime { class : "java.sql.Timestamp"} else now() as DateTime { class : "java.sql.Timestamp"},
	corrlationId: vars.messageCorrelationId
}]]]></db:input-parameters>
					
</db:insert>
		</async>
			</when>
			<otherwise >
				<set-variable value="Process Exit Audit Logging is turned OFF" doc:name="Set Logging Payload" doc:id="fadf10cc-c4d8-4e7d-a8cb-c38f24f504a3" variableName="loggingPayload"/>
				<flow-ref doc:name="Logging Message" doc:id="fe9ecd2b-a264-45d7-bd8d-ab35f1c7dcfb" name="logging-sub-flow"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="audit-success-sub-flow" doc:id="066c00e3-544f-418c-8b9d-3761831f5a52" >
		<choice doc:name="Choice" doc:id="7414f2da-257e-47b2-932a-41f6447aff9b" >
			<when expression="#[p('is.audit.toggle') == 'ON']">
				<async doc:name="Async" doc:id="e348bcba-1173-4136-aa32-802d4b26f3d0" >
					<db:insert doc:name="Insert For Success" doc:id="7090bbe4-8b71-4231-8b96-cc04c653ae58" config-ref="Database_Config">
						<db:sql >INSERT INTO [dbo].[t_audit] ([request_id] ,[message_id] ,[correlation_id] ,[log_type] ,[instance_thread] ,[log_message] ,[record_create_time] ,[message_receive_time] ,[flow_status],[primary_business_key],[secondary_business_key])
VALUES (:requestId , :finalMessageId, :corrlationId ,'SUCCESS' , :thread , :logMessage ,GETDATE() , :transactionStartTime ,0, :primaryKey, :secondaryKey);</db:sql>
						<db:input-parameters ><![CDATA[#[{
	requestId:vars.requestId,
	finalMessageId:vars.finalMessageId,
	logMessage: if(p('is.audit.payload') == 'ON' and payload != null and payload != '' and payload.^['mimeType'] != '*/*') write(payload, payload.^['mimeType']) else '',
	thread: if (vars.flowName != null) vars.flowName else p('flow.name.undefined'),
	primaryKey: vars.primaryKey,
	secondaryKey: vars.secondaryKey,
	transactionStartTime: if (vars.transactionStartTime != null) vars.transactionStartTime as DateTime { class : "java.sql.Timestamp"} else now() as DateTime { class : "java.sql.Timestamp"},
	corrlationId: vars.messageCorrelationId
}]]]></db:input-parameters>
					
</db:insert>
				</async>
			</when>
			<otherwise >
				<set-variable value="Success Audit Logging is turned OFF" doc:name="Set Logging Payload" doc:id="ddfb20d9-05e4-4d5c-a1b0-0a1308788f92" variableName="loggingPayload"/>
				<flow-ref doc:name="Logging Message" doc:id="fb6f9055-45a8-4fd3-ba7a-6b979392c443" name="logging-sub-flow"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="audit-warning-sub-flow" doc:id="b856cb2a-0295-4790-8885-69bb72aadd66" >
		<choice doc:name="Choice" doc:id="4684385c-c5c9-4bab-b84f-db9ca8262bc2" >
			<when expression="#[p('is.audit.toggle') == 'ON']">
				<async doc:name="Async" doc:id="0753c505-4bf8-413e-8870-3ca0fce2b196">
			<db:insert doc:name="Insert For Warning" doc:id="499df2f4-1e6d-479b-86da-7fe4df4523af" config-ref="Database_Config">
						<db:sql >INSERT INTO [dbo].[t_audit] ([request_id] ,[message_id] ,[correlation_id] ,[log_type] ,[instance_thread] ,[log_message] ,[record_create_time] ,[message_receive_time] ,[flow_status],[primary_business_key],[secondary_business_key])
VALUES (:requestId , :finalMessageId, :corrlationId ,'WARN' , :thread , :logMessage ,GETDATE() , :transactionStartTime ,00, :primaryKey, :secondaryKey);</db:sql>
						<db:input-parameters ><![CDATA[#[{
	requestId:vars.requestId,
	finalMessageId:vars.finalMessageId,
	logMessage: if(p('is.audit.payload') == 'ON' and payload != null and payload != '' and payload.^['mimeType'] != '*/*') write(payload, payload.^['mimeType']) else '',
	thread: if (vars.flowName != null) vars.flowName else p('flow.name.undefined'),
	primaryKey: vars.primaryKey,
	secondaryKey: vars.secondaryKey,
	transactionStartTime: if (vars.transactionStartTime != null) vars.transactionStartTime as DateTime { class : "java.sql.Timestamp"} else now() as DateTime { class : "java.sql.Timestamp"},
	corrlationId: vars.messageCorrelationId
}]]]></db:input-parameters>
					
</db:insert>
		</async>
			</when>
			<otherwise >
				<set-variable value="Warning Audit Logging is turned OFF" doc:name="Set Logging Payload" doc:id="8c408043-39e1-48fb-890d-e8343700a5b3" variableName="loggingPayload"/>
				<flow-ref doc:name="Logging Message" doc:id="a7d5abf2-da03-4068-a481-63db01b00fa7" name="logging-sub-flow"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="audit-error-sub-flow" doc:id="b1cf2018-d2b8-4b2b-a577-6bf61831e4bf" >
		<choice doc:name="Choice" doc:id="0cecc56b-99ee-45a0-bd0d-6bfb55e9de33" >
			<when expression="#[p('is.audit.toggle') == 'ON']">
				<async doc:name="Async" doc:id="47ba336f-77aa-43f6-945b-377b2681f8af">
					<db:insert doc:name="Insert For Error" doc:id="0a2a9479-1092-4d56-a59f-ab5342d5b25d" config-ref="Database_Config">
						<db:sql >INSERT INTO [dbo].[t_audit] ([request_id] ,[message_id] ,[correlation_id] ,[log_type] ,[instance_thread] ,[log_message] ,[record_create_time] ,[message_receive_time] ,[flow_status],[primary_business_key],[secondary_business_key])
VALUES (:requestId , :finalMessageId, :corrlationId ,'ERROR' , :thread , :logMessage ,GETDATE() , :transactionStartTime ,-1, :primaryKey, :secondaryKey);</db:sql>
						<db:input-parameters ><![CDATA[#[{
	requestId:vars.requestId,
	finalMessageId:vars.finalMessageId,
	logMessage: if(p('is.audit.payload') == 'ON' and payload != null and payload != '' and payload.^['mimeType'] != '*/*') write(payload, payload.^['mimeType']) else '',
	thread: if (vars.flowName != null) vars.flowName else p('flow.name.undefined'),
	primaryKey: vars.primaryKey,
	secondaryKey: vars.secondaryKey,
	transactionStartTime: if (vars.transactionStartTime != null) vars.transactionStartTime as DateTime { class : "java.sql.Timestamp"} else now() as DateTime { class : "java.sql.Timestamp"},
	corrlationId: vars.messageCorrelationId
}]]]></db:input-parameters>
					
</db:insert>
		</async>
			</when>
			<otherwise >
				<set-variable value="Error Audit Logging is turned OFF" doc:name="Set Logging Payload" doc:id="398e7383-93c3-46ea-aad6-076979e07eea" variableName="loggingPayload"/>
				<flow-ref doc:name="Logging Message" doc:id="e4570fd1-9ac5-424e-9bb4-16a6b2298327" name="logging-sub-flow"/>
			</otherwise>
		</choice>
	</sub-flow>
</mule>
